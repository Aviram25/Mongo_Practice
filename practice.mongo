-- Write a MongoDB query to display all the documents in the collection restaurants


db.restaurent.find();

-- Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for
all the documents in the collection restaurant.


db.restaurent.find({},{restaurant_id:1, name:1, borough:1, cuisine:1});

-- Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine,
but exclude the field _id for all the documents in the collection restaurant.


db.restaurent.find({},{restaurant_id:1, name:1, borough:1, cuisine:1, _id:0});

-- Write a MongoDB query to display the fields restaurant_id, name, borough and zip code,
but exclude the field _id for all the documents in the collection restaurant.


db.restaurent.find({},{restaurant_id:1, name:1, borough:1, 'address.zipcode':1, _id:0});

-- Write a MongoDB query to display all the restaurant which is in the borough Bronx


db.restaurent.find({borough:'Bronx'});

-- Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.
Sol.:

db.restaurent.find({borough:'Bronx'}).limit(5);

 -- Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in
the borough Bronx.


db.restaurent.find({borough:'Bronx'}).limit(5).skip(5);

-- Write a MongoDB query to find the restaurants who achieved a score more than 90.


db.restaurent.find({'grades.score':{$gt:90}});

-- Write a MongoDB query to find the restaurants that achieved a score, more than 80 but
less than 100.


db.restaurent.find({'grades.score':{$gt:80,$lt:100}});

-- Write a MongoDB query to find the restaurants which locate in latitude value less than -
95.754168.
Sol.:

db.restaurent.find({'address.coord.0':{$lt:95.754168}});

-- Write a MongoDB query to find the restaurants that do not prepare any cuisine of
-- 'American' and their grade score more than 70 and latitude less than -65.754168.


db.restaurent.find({cuisine:{$nin:['American']},'grades.score':{$gt:70},'address.coord.0':{$lt:65.754168}});

-- Write a MongoDB query to find the restaurants which do not prepare any cuisine of
--'American' and achieved a score more than 70 and located in the longitude less than -
65.754168.
Sol.:

db.restaurent.find({cuisine:{$nin:['American']},'grades.score':{$gt:70},'address.coord.1':{$lt:65.754168}});

-- Write a MongoDB query to find the restaurants which do not prepare any cuisine of
-- 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The
-- document must be displayed according to the cuisine in descending order.


db.restaurent.find({cuisine:{$nin:['American']},'grades.grade':'A',borough:{$nin:['Brooklyn']}}).sort({cuisine:-1});

-- Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those
-- restaurants which contain 'Wil' as first three letters for its name.
Sol.:

db.restaurent.find({name:/^Wil/},{restaurant_id:1, name:1, borough:1, cuisine:1});

-- Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those
-- restaurants which contain 'ces' as last three letters for its name.


db.restaurent.find({name:/ces$/},{restaurant_id:1, name:1, borough:1, cuisine:1});

-- Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those
-- restaurants which contain 'Reg' as three letters somewhere in its name.


db.restaurent.find({name:/.*reg.*/},{restaurant_id:1, name:1, borough:1, cuisine:1});

-- Write a MongoDB query to find the restaurants which belong to the borough Bronx and
-- prepared either American or Chinese dish.


db.restaurent.find({borough:'Bronx', cuisine:{$in:['American','Chinese']}});

-- Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those
restaurants which belong to the borough Staten Island or Queens or Bronx or Brooklyn.


db.restaurent.find({borough:{$in:['Staten Island','Queens', 'Bronx', 'Brooklyn']}},{restaurant_id:1, name:1, borough:1, cuisine:1});

--Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those
--restaurants which are not belonging to the borough Staten Island or Queens or Bronx or
--Brooklyn.


db.restaurent.find({borough:{$nin:['Staten Island','Queens', 'Bronx', 'Brooklyn']}},{restaurant_id:1, name:1, borough:1, cuisine:1});

-- Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those
-- restaurants which achieved a score which is not more than 10.


db.restaurent.find({'grades.score':{$lte:10}},{restaurant_id:1, name:1, borough:1, cuisine:1});
